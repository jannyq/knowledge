### Dependency Injection

#### Dependency injection in ASP.NET Core
The dependency injection software design pattern, supported by ASP.NET Core, is a technique for achieving Inversion of Control (IoC) between classes and their dependencies.

A _dependency_ is any object that another object requires.
```
public class MyDependency
{
    public MyDependency()
    {
    }

    public Task WriteMessage(string message)
    {
        Console.WriteLine(
            $"MyDependency.WriteMessage called. Message: {message}");

        return Task.FromResult(0);
    }
}
```

An instance of the MyDependency class can be created to make the WriteMessage method available to a class. The `MyDependency` class is a dependency of the `IndexModel` class:
```
public class IndexModel : PageModel
{
    MyDependency _dependency = new MyDependency();

    public async Task OnGetAsync()
    {
        await _dependency.WriteMessage(
            "IndexModel.OnGetAsync created this message.");
    }
}
```
The `IndexModel` class creates and directly depends on the `MyDependency` instance. Code dependencies are problematic and should be avoided for the following reasons:
- To replace `MyDependency` with a different implementation, the class must be modified.
- If `MyDependency` had dependencies, they must be configured by the class. In a large project with multiple classes depending on `MyDependency`, the configuration code becomes scattered across the app.
- This implementation is difficult to unit test. The app should use a mock or stub `MyDependency` class, which isn't possible with this approach.

Dependency injection addresses these problems through:
- The use of an interface or base class to abstract the dependency implementation.
- Registration of the dependency in a service container. ASP.NET Core provides a built-in service container, IServiceProvider. Services are registered in the app's `Startup.ConfigureServices` method.
- _Injection_ of the service into the constructor of the class where it's used. The framework takes on the responsibility of creating an instance of the dependency and disposing of it when it's no longer needed.
